{"mappings":"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","sources":["src/index.js"],"sourcesContent":["class Player {\n  constructor(game) {\n    this.game = game;\n    this.width = 100;\n    this.height = 100;\n    this.x = this.game.width * 0.5 - this.width * 0.5;\n    this.y = this.game.height - this.height;\n    this.speed = 5;\n  }\n\n  draw(context) {\n    context.fillRect(this.x, this.y, this.width, this.height);\n  }\n\n  update() {\n    //horizontal movement\n    if (this.game.keys.indexOf('ArrowLeft') > -1) this.x -= this.speed;\n    if (this.game.keys.indexOf('ArrowRight') > -1) this.x += this.speed;\n\n    //horizontal boundaries\n    if (this.x < -this.width * 0.5) this.x = -this.width * 0.5;\n    else if (this.x > this.game.width - this.width * 0.5)\n      this.x = this.game.width - this.width * 0.5;\n  }\n\n  shoot() {\n    const projectile = this.game.getProjectile();\n    if (projectile) projectile.start(this.x + this.width * 0.5, this.y);\n  }\n}\n\nclass Projectile {\n  constructor() {\n    this.width = 30;\n    this.height = 20;\n    this.x = 0;\n    this.y = 0;\n    this.speed = 20;\n    this.free = true;\n  }\n\n  draw(context) {\n    if (!this.free) {\n      context.fillRect(this.x, this.y, this.width, this.height);\n    }\n  }\n\n  update() {\n    if (!this.free) {\n      this.y -= this.speed;\n    }\n    if (this.y < -this.height) this.reset();\n  }\n\n  start(x, y) {\n    this.x = x - this.width * 0.5;\n    this.y = y;\n    this.free = false;\n  }\n\n  reset() {\n    this.free = true;\n  }\n}\n\nclass Enemy {\n  constructor(game, positionX, positionY) {\n    this.game = game;\n    this.width = this.game.enemySize;\n    this.height = this.game.enemySize;\n    this.x = 0;\n    this.y = 0;\n    this.positionX = positionX;\n    this.positionY = positionY;\n    this.markedForDeletion = false;\n  }\n\n  draw(context) {\n    context.strokeRect(this.x, this.y, this.width, this.height);\n  }\n\n  update(x, y) {\n    this.x = x + this.positionX;\n    this.y = y + this.positionY;\n\n    // check collisions enemies - projectiles\n    this.game.projectilesPool.forEach(projectile => {\n      if (!projectile.free && this.game.checkCollision(this, projectile)) {\n        this.markedForDeletion = true;\n        projectile.reset();\n      }\n    });\n  }\n}\n\nclass Wave {\n  constructor(game) {\n    this.game = game;\n    this.width = this.game.columns * this.game.enemySize;\n    this.height = this.game.rows * this.game.enemySize;\n    this.x = 0;\n    this.y = -this.height;\n    this.speedX = 3;\n    this.speedY = 0;\n    this.enemies = [];\n    this.create();\n  }\n\n  render(context) {\n    if (this.y < 0) this.y += 5;\n\n    this.speedY = 0;\n    if (this.x < 0 || this.x > this.game.width - this.width) {\n      this.speedX *= -1;\n      this.speedY = this.game.enemySize;\n    }\n\n    this.x += this.speedX;\n    this.y += this.speedY;\n\n    this.enemies.forEach(enemy => {\n      enemy.update(this.x, this.y);\n      enemy.draw(context);\n    });\n\n    this.enemies = this.enemies.filter(enemy => !enemy.markedForDeletion);\n  }\n\n  create() {\n    for (let y = 0; y < this.game.rows; y++) {\n      for (let x = 0; x < this.game.columns; x++) {\n        let enemyX = x * this.game.enemySize;\n        let enemyY = y * this.game.enemySize;\n\n        this.enemies.push(new Enemy(this.game, enemyX, enemyY));\n      }\n    }\n  }\n}\n\nclass Game {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.keys = [];\n    this.player = new Player(this);\n\n    this.projectilesPool = [];\n    this.numberOfProjectiles = 10;\n    this.createProjectiles();\n\n    this.columns = 5;\n    this.rows = 3;\n    this.enemySize = 60;\n\n    this.waves = [];\n    this.waves.push(new Wave(this));\n\n    //Event listener\n    window.addEventListener('keydown', evt => {\n      if (this.keys.indexOf(evt.key) === -1) this.keys.push(evt.key);\n      if (evt.key === '1') this.player.shoot();\n    });\n\n    window.addEventListener('keyup', evt => {\n      const idx = this.keys.indexOf(evt.key);\n      if (idx > -1) this.keys.splice(idx, 1);\n    });\n  }\n\n  render(context) {\n    this.player.draw(context);\n    this.player.update();\n    this.projectilesPool.forEach(projectile => {\n      projectile.update();\n      projectile.draw(context);\n    });\n\n    this.waves.forEach(wave => {\n      wave.render(context);\n    });\n  }\n\n  // створення здарядів\n  createProjectiles() {\n    for (let i = 0; i < this.numberOfProjectiles; i++) {\n      this.projectilesPool.push(new Projectile());\n    }\n  }\n\n  getProjectile() {\n    for (let i = 0; i < this.projectilesPool.length; i++) {\n      if (this.projectilesPool[i].free) {\n        return this.projectilesPool[i];\n      }\n    }\n  }\n\n  // collision detection between 2 rectangles\n  checkCollision(a, b) {\n    return (\n      a.x < b.x + b.width &&\n      a.x + a.width > b.x &&\n      a.y < b.y + b.height &&\n      a.y + a.height > b.y\n    );\n  }\n}\n\nwindow.addEventListener('load', function () {\n  const canvas = document.getElementById('canvas1');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 600;\n  canvas.height = 800;\n  ctx.fillStyle = 'white';\n  ctx.strokeStyle = 'white';\n  ctx.lineWidth = 5;\n\n  const game = new Game(canvas);\n\n  function animate() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    game.render(ctx);\n    requestAnimationFrame(animate);\n  }\n\n  animate();\n});\n"],"names":["_classCallCheck","instance","Constructor","Player","game","this","width","height","x","y","speed","key","context","fillRect","keys","indexOf","projectile","getProjectile","start","Projectile","free","reset","Enemy","positionX","positionY","enemySize","markedForDeletion","strokeRect","projectilesPool","forEach","_this","checkCollision","Wave","columns","rows","speedX","speedY","enemies","create","enemy","update","draw","filter","enemyX","enemyY","push","Game","canvas","player","numberOfProjectiles","createProjectiles","waves","window","addEventListener","evt","shoot","idx","splice","wave","render","i","length","a","b","document","getElementById","ctx","getContext","fillStyle","strokeStyle","lineWidth","animate","clearRect","requestAnimationFrame"],"version":3,"file":"index.c773dbb2.js.map"}