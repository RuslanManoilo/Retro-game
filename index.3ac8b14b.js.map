{"mappings":"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","sources":["src/js/player.js","src/js/projectile.js","src/js/enemy.js","src/js/wave.js","src/js/game.js","src/index.js"],"sourcesContent":["export class Player {\n  constructor(game) {\n    this.game = game;\n    this.width = 100;\n    this.height = 100;\n    this.x = this.game.width * 0.5 - this.width * 0.5;\n    this.y = this.game.height - this.height;\n    this.speed = 5;\n  }\n\n  draw(context) {\n    context.fillRect(this.x, this.y, this.width, this.height);\n  }\n\n  update() {\n    //horizontal movement\n    if (this.game.keys.indexOf('ArrowLeft') > -1) this.x -= this.speed;\n    if (this.game.keys.indexOf('ArrowRight') > -1) this.x += this.speed;\n\n    //horizontal boundaries\n    if (this.x < -this.width * 0.5) this.x = -this.width * 0.5;\n    else if (this.x > this.game.width - this.width * 0.5)\n      this.x = this.game.width - this.width * 0.5;\n  }\n\n  shoot() {\n    const projectile = this.game.getProjectile();\n    if (projectile) projectile.start(this.x + this.width * 0.5, this.y);\n  }\n}\n","export class Projectile {\n  constructor() {\n    this.width = 30;\n    this.height = 20;\n    this.x = 0;\n    this.y = 0;\n    this.speed = 20;\n    this.free = true;\n  }\n\n  draw(context) {\n    if (!this.free) context.fillRect(this.x, this.y, this.width, this.height);\n  }\n\n  update() {\n    if (!this.free) this.y -= this.speed;\n    if (this.y < -this.height) this.reset();\n  }\n\n  start(x, y) {\n    this.x = x - this.width * 0.5;\n    this.y = y;\n    this.free = false;\n  }\n\n  reset() {\n    this.free = true;\n  }\n}\n","export class Enemy {\n  constructor(game, positionX, positionY) {\n    this.game = game;\n    this.width = this.game.enemySize;\n    this.height = this.game.enemySize;\n    this.x = 0;\n    this.y = 0;\n    this.positionX = positionX;\n    this.positionY = positionY;\n    this.markedForDeletion = false;\n  }\n\n  draw(context) {\n    context.strokeRect(this.x, this.y, this.width, this.height);\n  }\n\n  update(x, y) {\n    this.x = x + this.positionX;\n    this.y = y + this.positionY;\n\n    // check collisions enemies - projectiles\n    this.game.projectilesPool.forEach(projectile => {\n      if (!projectile.free && this.game.checkCollision(this, projectile)) {\n        this.markedForDeletion = true;\n        projectile.reset();\n      }\n    });\n  }\n}\n","import { Enemy } from './enemy';\n\nexport class Wave {\n  constructor(game) {\n    this.game = game;\n    this.width = this.game.columns * this.game.enemySize;\n    this.height = this.game.rows * this.game.enemySize;\n    this.x = 0;\n    this.y = -this.height;\n    this.speedX = 3;\n    this.speedY = 0;\n    this.enemies = [];\n    this.create();\n  }\n\n  render(context) {\n    if (this.y < 0) this.y += 5;\n\n    this.speedY = 0;\n    if (this.x < 0 || this.x > this.game.width - this.width) {\n      this.speedX *= -1;\n      this.speedY = this.game.enemySize;\n    }\n\n    this.x += this.speedX;\n    this.y += this.speedY;\n\n    this.enemies.forEach(enemy => {\n      enemy.update(this.x, this.y);\n      enemy.draw(context);\n    });\n\n    this.enemies = this.enemies.filter(enemy => !enemy.markedForDeletion);\n  }\n\n  create() {\n    for (let y = 0; y < this.game.rows; y++) {\n      for (let x = 0; x < this.game.columns; x++) {\n        let enemyX = x * this.game.enemySize;\n        let enemyY = y * this.game.enemySize;\n\n        this.enemies.push(new Enemy(this.game, enemyX, enemyY));\n      }\n    }\n  }\n}\n","import { Player } from './player';\nimport { Projectile } from './projectile';\nimport { Wave } from './wave';\n\nexport class Game {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.keys = [];\n    this.player = new Player(this);\n\n    this.projectilesPool = [];\n    this.numberOfProjectiles = 10;\n    this.createProjectiles();\n\n    this.columns = 5;\n    this.rows = 3;\n    this.enemySize = 60;\n\n    this.waves = [];\n    this.waves.push(new Wave(this));\n\n    //Event listener\n    window.addEventListener('keydown', evt => {\n      if (this.keys.indexOf(evt.key) === -1) this.keys.push(evt.key);\n      if (evt.key === '1') this.player.shoot();\n    });\n\n    window.addEventListener('keyup', evt => {\n      const idx = this.keys.indexOf(evt.key);\n      if (idx > -1) this.keys.splice(idx, 1);\n    });\n  }\n\n  render(context) {\n    this.player.draw(context);\n    this.player.update();\n    this.projectilesPool.forEach(projectile => {\n      projectile.update();\n      projectile.draw(context);\n    });\n\n    this.waves.forEach(wave => {\n      wave.render(context);\n    });\n  }\n\n  // створення здарядів\n  createProjectiles() {\n    for (let i = 0; i < this.numberOfProjectiles; i++) {\n      this.projectilesPool.push(new Projectile());\n    }\n  }\n\n  getProjectile() {\n    for (let i = 0; i < this.projectilesPool.length; i++) {\n      if (this.projectilesPool[i].free) {\n        return this.projectilesPool[i];\n      }\n    }\n  }\n\n  // collision detection between 2 rectangles\n  checkCollision(a, b) {\n    return (\n      a.x < b.x + b.width &&\n      a.x + a.width > b.x &&\n      a.y < b.y + b.height &&\n      a.y + a.height > b.y\n    );\n  }\n}\n","import { Game } from './js/game';\n\nwindow.addEventListener('load', function () {\n  const canvas = document.getElementById('canvas1');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 600;\n  canvas.height = 800;\n  ctx.fillStyle = 'white';\n  ctx.strokeStyle = 'white';\n  ctx.lineWidth = 5;\n\n  const game = new Game(canvas);\n\n  function animate() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    game.render(ctx);\n    requestAnimationFrame(animate);\n  }\n\n  animate();\n});\n"],"names":["$03ce2d03a8d35791$export$2616165974278734","draw","context","fillRect","this","x","y","width","height","update","game","keys","indexOf","speed","shoot","projectile","getProjectile","start","constructor","$b5a217e963599e6a$export$58825bda29b44ca2","free","reset","$fd9ba723fbe17f5f$export$eefe978c73a9a6","strokeRect","positionX","positionY","projectilesPool","forEach","checkCollision","markedForDeletion","enemySize","$10dfe213bd0050ea$export$b8bb87b40c00c04e","render","speedY","speedX","enemies","enemy","filter","create","rows","columns","enemyX","enemyY","push","$71548325fa41fa94$export$985739bfa5723e08","player","waves","wave","createProjectiles","i","numberOfProjectiles","length","a","b","canvas","window","addEventListener","evt","key","idx","splice","document","getElementById","ctx","getContext","fillStyle","strokeStyle","lineWidth","animate","clearRect","requestAnimationFrame"],"version":3,"file":"index.3ac8b14b.js.map"}